/**
 * TYPE MIXIN
 */

//
// Listado de familias tipográficas
//

$font-families: (
  'base': $font-family-base,
  'heading': $font-family-heading,
  'monospace': $font-family-monospace,
) !default;

//
// Listado de tamaños de fuente base por tamaño de pantalla
//
$root-sizes: (
  'all': $root-font-size-desk,
  'palm': $root-font-size-palm,
  'lap': $root-font-size-lap,
  'small': $root-font-size-small,
  'desk': $root-font-size-desk,
  'large': $root-font-size-large,
) !default;

//
// Listado de pesos tipográficos
//
$font-weights: (
  'extralight': $font-weight-extralight,
  'light': $font-weight-ligh,
  'normal': $font-weight-normal,
  'semibold': $font-weight-semibold,
  'bold': $font-weight-bold,
  'black': $font-weight-black,
) !default;

/**
 * ROOTSIZE
 *
 * Genera los tamaños de fuente por defecto en %, por cada breakpoint.
 * Ejemplo de uso.
 *
 * body {
 *   @include rootsize;
 * }
 */
@mixin rootsize {
  @if ($responsive) {
    @each $breakpoint, $size in $root-sizes {
      @include media($breakpoint) {
        font-size: #{$size / 16px * 100%};
      }
    }
  }
}

//
// Tamaño de fuente
//
// Admite un valor númerico o un alias de la escala modular.
//

@function font-size($size) {
  // Tipo de la variable $fontsize
  $font-value: type-of($size);

  // Si el valor del $size es un número
  @if $font-value == number {
    $module: pow($modular-scale, $size);

    @return #{$module}rem;
  }

  // Si el valor del $size no es un número y es el alias de la escala modular
  @else {
    @if map-has-key($styles-sizes, $size) {
      $level: map-get($styles-sizes, $size);
      $module: pow($modular-scale, $level);

      @return #{$module}rem;
    }
  }
}

//
// Altura de línea
//
// Admite un valor númerico o un alias de la escala modular.
//

@function line-height($size) {
  // Tipo de la variable $size
  $font-value: type-of($size);

  // Si el valor del $size es un número
  @if $font-value == number {
    $module: pow($modular-scale, $size);

    @return #{ceil(($module * 2.5) / $space) * ($space / 2)}rem;
  }

  // Si el valor del $size no es un número y es el alias de la escala modular
  @else {
    @if map-has-key($styles-sizes, $size) {
      $level: map-get($styles-sizes, $size);
      $module: pow($modular-scale, $level);

      @return #{ceil(($module * 2.5) / $space) * ($space / 2)}rem;
    }
  }
}

//
// Peso tipográfico
//
// Devuele el valor del peso seleccionado
//
// .header { font-weight: font-weight(bold); }
//

@function font-weight($weight) {
  @return map_get($font-weights, $weight);
}

//
// Familia tipográfica
//
// Devuele el valor de la familia seleccionada
//
// .header { font-family: font-family(heading); }
//

@function font-family($family) {
  @return map_get($font-families, $family);
}
