/**
 * Computes a top-shadow for a card effect.
 *
 * @param {Number} $depth - depth level
 *
 * @return {List}
 */
@function top-shadow($depth, $color) {
  $primary-offset: nth(1 3 10 15 20, $depth) * 1px;
  $blur: nth(3 6 20 25 40, $depth) * 1px;
  $depth-color: rgba($color, nth(0.12 0.15 0.15 0.15 0.2, $depth));

  @return 0 $primary-offset $blur $depth-color;
}

/**
 * Computes a bottom-shadow for a card effect.
 *
 * @param {Number} $depth - depth level
 *
 * @return {List}
 */
@function bottom-shadow($depth, $color) {
  $primary-offset: nth(1 2 3 5, $depth) * 1px;
  $blur: nth(2 4 6 10, $depth) * 1px;
  $depth-color: rgba($color, nth(0.24 0.12 0.1 0.05, $depth));

  @return 0 $primary-offset $blur $depth-color;
}

/**
 * Gives a card depth effect.
 *
 * @param {Number} $depth - depth level (between 1 and 5)
 *
 * @link https://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
 *
 * @requires {function} top-shadow
 * @requires {function} bottom-shadow
 */
@mixin shadow($depth, $color: color(shadow)) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else if $depth == 5 {
    box-shadow: top-shadow($depth, $color);
  } @else {
    box-shadow: bottom-shadow($depth, $color), top-shadow($depth, $color);
  }
}
